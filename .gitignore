__pycache__/
.venv/
*.pyc
.env

# IMPORTANT: Essential model files for university assessment are NOT ignored
# The following model files are required and should be included:
# - image_classification/cnn_model_classes.json (CNN class mapping)
# - runs/detect/train/weights/best.pt (YOLO weights - 21MB)
# - image_classification/utensils-wp5hm-yolo8/data.yaml (YOLO config)

# CNN model excluded due to GitHub size limits (96MB)
# For assessment: model available separately or can be retrained
image_classification/cnn_model.h5

# Exclude other model formats but keep .pt for assessment (if under 100MB)
*.weights
*.onnx

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Embedding cache files (auto-generated)
*_embeddings.npy

# Test files
test_*.py

# Large training datasets (exclude to save space, but keep essential configs)
image_classification/cls_data/
image_classification/multiclass_data/
image_classification/combined_dataset/
image_classification/multi_object_enhanced/

# Keep utensils-wp5hm-yolo8/data.yaml but exclude large dataset files
image_classification/utensils-wp5hm-yolo8/train/
image_classification/utensils-wp5hm-yolo8/valid/
image_classification/utensils-wp5hm-yolo8/test/

# Training results and logs (but keep final model weights)
results/
runs/detect/train/weights/last.pt
runs/detect/train/*.txt
runs/detect/train/*.yaml
!runs/detect/train/weights/best.pt

# Exclude enhanced YOLO training results (files too large for GitHub)
runs/enhanced_train_*/
runs/enhanced_*/

# Cache files
*.cache

# Annotated example images (generated)
image_classification/example_images/annotated/

# Zip files and test environments
*.zip
test_env/
image_classification/utensils-wp5hm-yolo8/yolov8n.pt
image_classification/utensils-wp5hm-yolo8/yolov8s.pt
yolov8n.pt
yolov8s.pt
